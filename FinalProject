//Team Brim: Lexie Reddon & Chase Rodie
//Date: 12/15/23
//Purpose: Swamp cooler using embedded systems

//Libraries
#include <dht_nonblocking.h>
#include <dht.h>
#include <Stepper.h>
#include <LiquidCrystal.h> 


//Defined Pins
#define POWER_PIN 7
#define WATER_SIGNAL_PIN 0
#define HUMID_SIGNAL_PIN 6


//Defined Registers
#define RDA 0x80
#define TBE 0x20


const int interruptPin = 3;
unsigned int Frequency = 0;
const int stepsPerRevolution = 2038;
Stepper myStepper = Stepper(stepsPerRevolution, 8, 9, 10, 11);

volatile unsigned char *myTCCR1A = (unsigned char *)0x80;
volatile unsigned char *myTCCR1B = (unsigned char *)0x81;
volatile unsigned char *myTCCR1C = (unsigned char *)0x82;
volatile unsigned char *myTIMSK1 = (unsigned char *)0x6F;
volatile unsigned int *myTCNT1 = (unsigned int *)0x84;
volatile unsigned char *myTIFR1 = (unsigned char *)0x36;

//Register Setup
volatile unsigned char *myUCSR0A = (unsigned char *)0x00C0;
volatile unsigned char *myUCSR0B = (unsigned char *)0x00C1;
volatile unsigned char *myUCSR0C = (unsigned char *)0x00C2;
volatile unsigned int  *myUBRR0  = (unsigned int *) 0x00C4;
volatile unsigned char *myUDR0   = (unsigned char *)0x00C6;
volatile unsigned char* my_ADMUX = (unsigned char*) 0x7C;
volatile unsigned char* my_ADCSRB = (unsigned char*) 0x7B;
volatile unsigned char* my_ADCSRA = (unsigned char*) 0x7A;
volatile unsigned int* my_ADC_DATA = (unsigned int*) 0x78;


// Define Port E Register Pointers
volatile unsigned char* port_e  = (unsigned char*) 0x2E;
volatile unsigned char* ddr_e  = (unsigned char*) 0x2D;
volatile unsigned char* pin_e  = (unsigned char*) 0x2C;


//Define Port H Register Pointers
volatile unsigned char* port_h = (unsigned char*) 0x102;
volatile unsigned char* ddr_h = (unsigned char*) 0x101;
volatile unsigned char* pin_h = (unsigned char*) 0x100;


//Define Port B Register Pointers
volatile unsigned char* port_b = (unsigned char*) 0x25;
volatile unsigned char* ddr_b = (unsigned char*) 0x24;
volatile unsigned char* pin_b = (unsigned char*) 0x23;


//Define Port F Register Pointers
volatile unsigned char* port_f = (unsigned char*) 0x31;
volatile unsigned char* ddr_f = (unsigned char*) 0x30;
volatile unsigned char* pin_f = (unsigned char*) 0x2F;


//Define Port G Register Pointers
volatile unsigned char* port_g = (unsigned char*) 0x34;
volatile unsigned char* ddr_g = (unsigned char*) 0x33;
volatile unsigned char* pin_g = (unsigned char*) 0x32;


//Define Port C Register Pointers
volatile unsigned char* port_c = (unsigned char*) 0x28;
volatile unsigned char* ddr_c = (unsigned char*) 0x27;
volatile unsigned char* pin_c = (unsigned char*) 0x26;


//Define Port A Register Pointers
volatile unsigned char* port_a = (unsigned char*) 0x22;
volatile unsigned char* ddr_a = (unsigned char*) 0x21;
volatile unsigned char* pin_a = (unsigned char*) 0x20;


//Important Global Variables
dht DHT;
int value = 0;
const int RS = 29, EN = 31, D4 = 33, D5 = 35, D6 = 37, D7 = 39;
volatile bool buttonPressed = false;
volatile bool isError = false;
volatile unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 50;


byte customChar[8] = {
 0b00000,
 0b00000,
 0b01110,
 0b01110,
 0b01110,
 0b00000,
 0b00000,
 0b00000
};


LiquidCrystal lcd(RS, EN, D4, D5, D6, D7);


void setup() {
 //set Start Button (Digital Pin  2 (PE5)) to INPUT
 *ddr_e &= 0xFB;
 //set Stop Button (Digital Pin 30 (PC7)) to INPUT
 *ddr_c &= 0xFB;
 //set Reset Button (Digital Pin 27 (PA5)) to INPUT
 *ddr_a &= 0xFB;


 //set Yellow LED (Digital Pin 24 (PA2)) to OUTPUT
 *ddr_a |= 0x04;
 //set Green LED (Digital Pin 23 (PA1)) to OUTPUT
 *ddr_a |= 0x02;
 //set Blue LED (Digital Pin 26 (PA4)) to OUTPUT
 *ddr_a |= 0x10;
 //set Red LED (Digital Pin 22(PA0)) to OUTPUT
 *ddr_a |= 0x01;
 //sppedPin of Fan to OUTPUT (Digital Pin 41 (PG0))
 *ddr_g |= 0x01;
 //dir1 (PG5) of Fan to OUTPUT
 *ddr_g |= 0x20;
 //dir2 (PB6) of Fan to OUTPUT
 *ddr_b |= 0x40;
 //POWER_PIN (PH4) of Fan to OUTPUT
 *ddr_h |= 0x10;
 //HUMID Pin as OUTPUT
 *ddr_h |= 0x08;
 U0init(9600);
 lcd.begin(16, 2); // set up number of columns and rows
 lcd.setCursor(0,0);

 *port_c &= 0x00;
  *port_a |= 0x04;
 *port_h &= 0x00;
 adc_init();
 attachInterrupt(digitalPinToInterrupt(interruptPin), buttonISR, RISING);
}


void loop() {
if(isError == true){
if(*pin_a & 0x20){
           idle();
}
}


while(*pin_c & 0x80){
 disable();
 buttonPressed = false;
}


*port_h |= 0x10;
int value = adc_read(WATER_SIGNAL_PIN);
my_delay(1500);
int chk = DHT.read11(HUMID_SIGNAL_PIN);
my_delay(1500);
Serial.print(DHT.temperature);
my_delay(1500);
 if(DHT.temperature < 40 && buttonPressed){
  my_delay(1500);
   running();
  my_delay(1500);
     if(value < 50){
       error();
       if(*pin_a & 0x20){
           idle();
      }
  }  
   //WORKS AND TESTED ALL CHECKS ARE PASSING
   }else if(DHT.temperature <= 1  && buttonPressed){
       *port_a &= 0x00;
       idle();
       if(value <= 10000){
         *port_a &= 0x00;
         error();
       
    }
  }
}


unsigned int adc_read(unsigned char adc_channel_num)
{
 // clear the channel selection bits (MUX 4:0)
 *my_ADMUX  &= 0b11100000;
 // clear the channel selection bits (MUX 5)
 *my_ADCSRB &= 0b11110111;
 // set the channel number
 if(adc_channel_num > 7)
 {
   // set the channel selection bits, but remove the most significant bit (bit 3)
   adc_channel_num -= 8;
   // set MUX bit 5
   *my_ADCSRB |= 0b00001000;
 }
 // set the channel selection bits
 *my_ADMUX  += adc_channel_num;
 // set bit 6 of ADCSRA to 1 to start a conversion
 *my_ADCSRA |= 0x40;
 // wait for the conversion to complete
 while((*my_ADCSRA & 0x40) != 0);
 // return the result in the ADC data register
 return *my_ADC_DATA;
}




void adc_init()
{// setup the A register
*my_ADCSRA |= 0b10000000; // set bit   7 to 1 to enable the ADC
*my_ADCSRA &= 0b11011111; // clear bit 6 to 0 to disable the ADC trigger mode
*my_ADCSRA &= 0b11110111; // clear bit 5 to 0 to disable the ADC interrupt
*my_ADCSRA &= 0b11111000; // clear bit 0-2 to 0 to set prescaler selection to slow reading
// setup the B register
*my_ADCSRB &= 0b11110111; // clear bit 3 to 0 to reset the channel and gain bits
*my_ADCSRB &= 0b11111000; // clear bit 2-0 to 0 to set free running mode
// setup the MUX Register
*my_ADMUX &= 0b01111111; // clear bit 7 to 0 for AVCC analog reference
*my_ADMUX |= 0b01000000; // set bit   6 to 1 for AVCC analog reference
*my_ADMUX &= 0b11011111; // clear bit 5 to 0 for right adjust result
*my_ADMUX &= 0b11100000; // clear bit 4-0 to 0 to reset the channel and gain bits}
}




void U0init(int U0baud)
{
unsigned long FCPU = 16000000;
unsigned int tbaud;
tbaud = (FCPU / 16 / U0baud - 1);
// Same as (FCPU / (16 * U0baud)) - 1;
*myUCSR0A = 0x20;
*myUCSR0B = 0x18;
*myUCSR0C = 0x06;
*myUBRR0  = tbaud;
}




unsigned char U0kbhit()
{
 return *myUCSR0A & RDA;
}




unsigned char U0getchar()
{
 return *myUDR0;
}




void U0putchar(unsigned char U0pdata)
{
 while((*myUCSR0A & TBE)==0);
 *myUDR0 = U0pdata;
}


void buttonISR() {
 unsigned long currentMillis = millis();


 // Ignore button presses within the debounce delay
 if (currentMillis - lastDebounceTime < debounceDelay) {
   return;
 }


 // Save the current timestamp
 lastDebounceTime = currentMillis;


 // Call the idle function directly
 idle();


}

void idle(){
 //turn fan off

  // Read temperature and humidity
  int temperature = DHT.temperature;
  int humidity = DHT.humidity;
  int chk = DHT.read11(HUMID_SIGNAL_PIN);

  // Display temperature and humidity on the LCD
  lcd.clear();  // Clear the LCD screen
  lcd.setCursor(0, 0);  // Set cursor to the first row
  lcd.print("Temp: ");
  lcd.print(DHT.temperature);
  lcd.print(" C");

  lcd.setCursor(0, 1);  // Set cursor to the second row
  lcd.print("Humidity: ");
  lcd.print(DHT.humidity);
  lcd.print(" %");


*port_g &= 0x00;
 *port_b &= 0x00;
 //yellow LED is off
 *port_a &= 0x00;
 //green LED is on
 *port_a |= 0x02;
 //display temp and humidity
 buttonPressed = true;
}




void running() {
 //Turn Off Green LED (PA1)
 *port_a &= 0x00;
 //Turn On Blue LED (PA4)
 *port_a |= 0x10;
 //Turn on dir 1 (PG5)
 *port_g |= 0x20;
 //Turn on Speed Pin (PG0)
 *port_g |= 0x21;

 int temperature = DHT.temperature;
int humidity = DHT.humidity;

  lcd.clear();  // Clear the LCD screen
  lcd.setCursor(0, 0);  // Set cursor to the first row
  lcd.print("Temp: ");
  lcd.print(DHT.temperature);
  lcd.print(" C");

  lcd.setCursor(0, 1);  // Set cursor to the second row
  lcd.print("Humidity: ");
  lcd.print(DHT.humidity);
  lcd.print(" %");

}




void disable() {
 *port_a &= 0x00;
 *port_a |= 0x04;
 *port_g &= 0x00;
 *port_b &= 0x00;


     if (buttonPressed) {
       idle();
       buttonPressed = false;  // Reset the flag after handling the button press
   }
}


void error(){
 buttonPressed = false;
 isError = true;
  lcd.clear();  // Clear the LCD screen
  lcd.setCursor(0, 0);  // Set cursor to the first row
  lcd.print("Water level is");
  lcd.setCursor(0, 1);
  lcd.print("too low");
 *port_a &= 0x00;
 *port_g &= 0x00;
 *port_b &= 0x00;
 *port_a |= 0x01;
}

void my_delay(unsigned int freq)
{
  // Calculate period
  double period = 1.0 / double(freq);
  // 50% duty cycle
  double half_period = period / 2.0f;
  // Clock period def
  double clk_period = 0.0000000625;
  // Calculate ticks
  unsigned int ticks = half_period / clk_period;
  // Stop the timer
  *myTCCR1B &= 0xF8;
  // Set the counts
  *myTCNT1 = (unsigned int)(65536 - ticks);
  // Start the timer
  *myTCCR1A = 0x0;
  *myTCCR1B |= 0b00000001;
  // Wait for overflow
  while ((*myTIFR1 & 0x01) == 0); // 0b 0000 0000
  // Stop the timer
  *myTCCR1B &= 0xF8; // 0b 0000 0000
  // Reset TOV
  *myTIFR1 |= 0x01;
}
